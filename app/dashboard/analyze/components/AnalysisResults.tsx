'use client'

import { useState } from 'react'
import { marked } from 'marked'
import { Download, Copy, Eye, EyeOff, Star, RefreshCw } from 'lucide-react'

interface AnalysisResultsProps {
  result: string
  reviewResult?: string
  metadata?: {
    model?: string
    provider?: string
    usage?: any
  }
  reviewMetadata?: {
    model?: string
    provider?: string
    usage?: any
  }
  onFeedback: (rating: number) => void
  onRequestReview: () => void
  feedbackSubmitted: boolean
  showReviewButton?: boolean
}

export default function AnalysisResults({
  result,
  reviewResult,
  metadata,
  reviewMetadata,
  onFeedback,
  onRequestReview,
  feedbackSubmitted,
  showReviewButton = true
}: AnalysisResultsProps) {
  const [viewMode, setViewMode] = useState<'rendered' | 'markdown'>('rendered')
  const [userRating, setUserRating] = useState<number>(0)
  const [copied, setCopied] = useState(false)

  const handleCopy = async () => {
    await navigator.clipboard.writeText(result)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const handleRating = (rating: number) => {
    setUserRating(rating)
    onFeedback(rating)
  }

  const downloadAsHTML = () => {
    const htmlContent = `<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>NEaR Analysis Report</title>
  <style>
    body { 
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
      line-height: 1.6; 
      color: #333;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    h1, h2, h3 { color: #2c3e50; }
    table { border-collapse: collapse; width: 100%; margin: 20px 0; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    th { background-color: #f2f2f2; }
  </style>
</head>
<body>
  ${marked(result)}
  <hr>
  <p style="text-align: center; color: #666;">
    Generated by NEaR - ${new Date().toLocaleDateString()}
  </p>
</body>
</html>`

    const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `analysis-${new Date().toISOString().split('T')[0]}.html`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="space-y-6">
      {/* Main Analysis Results */}
      <div className="card">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">Analysis Results</h3>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setViewMode(viewMode === 'rendered' ? 'markdown' : 'rendered')}
              className="btn-secondary text-sm"
              title={viewMode === 'rendered' ? 'Show Markdown' : 'Show Formatted'}
            >
              {viewMode === 'rendered' ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
            </button>
            <button
              onClick={handleCopy}
              className="btn-secondary text-sm"
              title="Copy to clipboard"
            >
              <Copy className="h-4 w-4" />
              {copied && <span className="ml-1">Copied!</span>}
            </button>
            <button
              onClick={downloadAsHTML}
              className="btn-secondary text-sm"
              title="Download as HTML"
            >
              <Download className="h-4 w-4" />
            </button>
          </div>
        </div>

        {/* Analysis Content */}
        <div className="prose prose-invert max-w-none">
          {viewMode === 'rendered' ? (
            <div dangerouslySetInnerHTML={{ __html: marked(result) }} />
          ) : (
            <pre className="bg-muted p-4 rounded-md overflow-x-auto">
              <code>{result}</code>
            </pre>
          )}
        </div>

        {/* Metadata */}
        {metadata && (
          <div className="mt-4 pt-4 border-t border-border text-sm text-muted-foreground">
            Model: {metadata.provider} - {metadata.model}
          </div>
        )}
      </div>

      {/* Review Section */}
      {reviewResult && (
        <div className="card bg-primary/5">
          <div className="flex items-center mb-4">
            <RefreshCw className="h-5 w-5 mr-2 text-primary" />
            <h3 className="text-lg font-semibold">Second Opinion Analysis</h3>
          </div>
          <div className="prose prose-invert max-w-none">
            <div dangerouslySetInnerHTML={{ __html: marked(reviewResult) }} />
          </div>
          {reviewMetadata && (
            <div className="mt-4 pt-4 border-t border-border text-sm text-muted-foreground">
              Review Model: {reviewMetadata.provider} - {reviewMetadata.model}
            </div>
          )}
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex flex-col space-y-4">
        {/* Review Button - Prominent CTA */}
        {showReviewButton && !reviewResult && (
          <button
            onClick={onRequestReview}
            className="btn-primary w-full py-3 text-base font-medium"
          >
            <RefreshCw className="mr-2 h-5 w-5" />
            Get Second Opinion with Different Model
          </button>
        )}

        {/* Feedback Section - Improved Star Rating */}
        {!feedbackSubmitted ? (
          <div className="card bg-muted/50">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">Rate this analysis:</span>
              <div className="flex items-center space-x-1">
                {[1, 2, 3, 4, 5].map((rating) => (
                  <button
                    key={rating}
                    onClick={() => handleRating(rating)}
                    className={`p-1 transition-colors ${
                      userRating >= rating 
                        ? 'text-yellow-500' 
                        : 'text-muted-foreground hover:text-yellow-500'
                    }`}
                    title={`Rate ${rating} stars`}
                  >
                    <Star 
                      className="h-6 w-6" 
                      fill={userRating >= rating ? 'currentColor' : 'none'}
                    />
                  </button>
                ))}
              </div>
            </div>
            <div className="text-xs text-muted-foreground mt-2 text-center">
              {userRating === 0 && 'Click to rate'}
              {userRating === 1 && 'Poor - Needs significant improvement'}
              {userRating === 2 && 'Fair - Some issues to address'}
              {userRating === 3 && 'Good - Meets expectations'}
              {userRating === 4 && 'Very Good - Exceeds expectations'}
              {userRating === 5 && 'Excellent - Outstanding analysis'}
            </div>
          </div>
        ) : (
          <div className="text-center text-sm text-muted-foreground bg-muted/50 p-3 rounded-md">
            âœ“ Thank you for your feedback!
          </div>
        )}
      </div>
    </div>
  )
}